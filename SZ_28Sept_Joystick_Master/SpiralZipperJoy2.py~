#!/usr/bin/env python
'''
Set up and control a diff drive robot using a joystick

I recommend running this code in ipython via:
>> execfile('demo_diffdrive.py')
'''
# Import pygame, which handles joysticks and other inputs
import pygame
from pygame import joystick
from pygame import event
from pygame.locals import *
import ckbot.logical as L # CKBot interface
from time import time as now, sleep
from numpy import pi
import math
import numpy as np
import spiral_zipper_k as sz

# Specify module ID and the name we want to give each of them:
modules = {0xE4: 'T1',0xEA:'T2',0xDF:'T3'}

if __name__=="__main__":

    import sys

    print "Initializing Spiral Zipper Demo"  
    # Initialize pygame and a joystick
    pygame.init()
    joystick.init()

    joystick.Joystick(0).init()

    # Optionally specify left and right modules through the command line.
    
    if len(sys.argv) == 2:
        modules = {int(sys.argv[1]) : 'T1', int(sys.argv[2]) : 'T2', int(sys.argv[3]) : 'T3'}

    # Create a CKBot cluster
    c = L.Cluster()
    
    c.populate( len(modules), modules )

    # Limit module speed and torque for safety
    torque_limit = 0.75
    for m in c.itermodules():
        m.set_torque_limit( torque_limit )
        # If module is a servo, then also limit speed
        if not m.get_mode():
            m.set_speed( 10.0 )

    # init spiral zipper TODO: set these to be closer to actual
    #Lengths = [0.1,0.1,0.1,0.1]
    start_pos = [0,0,0.30]
    current_goal=start_pos
    r_winch = 0.022  #radius of the pulleys on the motors
    looptime = .1
    sz1 = sz.SpiralZipper(start_pos, r_winch, c, looptime)

    Kp1 = 12 #proportional gains
    Kp2 = 4
    Kp3 = 4
    Kp = [Kp1,Kp2,Kp3]
    
    Ki1 = 2  #integral gains
    Ki2 = 2
    Ki3 = 10
    Ki = [Ki1,Ki2,Ki3]

    sz1.set_Kp_Gains(Kp)
    sz1.set_Ki_Gains(Ki)

    Kx = 0.025 #joystick sensitivity convert input into how much x to add
    Ky = 0.025 #^
    Kz = 0.0023
    #gains to tune error and compensate for each module ability
    # be careful not to make these too large as the torque may saturate and the controller will not work

    print "Spiral Zipper demo initialized"
    drivable = True
    drive = 0.0
    turn = 0.0
    driveGain = 0.5
    turnGain = 0.4
    old_report = now()
    last_report = now()
    report_interval = 10
    x_move = 0
    y_move = 0
    z_move = 0
    count = 0
   # data = open('/home/modlab/Desktop/data.txt','w')
    #big_list = np.array([[1, 2, 3]])

    #TODO: put this loop on a timer
    while True:
        try:
	    time_elapsed = now() - old_report

            if time_elapsed >= looptime:
       	        print "loop time is :" 
       	        print time_elapsed
            	old_report = now()
                for evt in event.get():
                	if evt.type == JOYAXISMOTION:   
                 	   # Look at joystick events and control values
		    		drivable = 1
                    		if evt.axis == 0:
                        		x_move = evt.value
                    		elif evt.axis == 1:
                        		y_move = evt.value
 			        elif evt.axis == 3:
					z_move = evt.value
                	elif evt.type == JOYBUTTONDOWN:
                		# Pressing controller's main buttons toggles drivability
                    		if evt.button is 4:
                        		drivable = 1
					z_move = 0
		    		elif evt.button is 6:
					drivable = 1
					z_move = 0
				elif evt.button is 1:
					drivable = 1
					z_move = 0				
                                else:
            		            raise KeyboardInterrupt
            	if drivable:
			#print "xmove : %f" %x_move
			#print "ymove : %f" %y_move
			#print "zmove : %f" %z_move
			
			sz1.update_state(c)  #gets tether positions and velocities from encoders and IMU
        	    	sz1.update_goal([x_move*Kx,-y_move*Ky, z_move*Kz])  #input sets a desired velocity for the system in xyz
		
			sz1.set_tether_speeds() #function that transforms the xyz desired vel into a set of tether velocities
				
			sz1.actuate_Motors(c) #function that transforms desired tether velocities into motor commands
                
			print "goal is"
                	print sz1.get_goal()
			print "current position is:"
			print sz1.sensed_pos

                	print 'Tor1 %f' %c.at.T1.get_torque()
                	print 'Tor2 %f' %c.at.T2.get_torque()
                	print 'Tor3 %f' %c.at.T3.get_torque()

            	else:
                	for m in c.itermodules():
                	    m.set_torque(0) #not go_slack - causes arm to collapse
                #send 
        except KeyboardInterrupt or ValueError:
            # Break out of the loop
            print "Keyboard Interrupt detected"
            break
        '''except Exception,e:

            print "\n\nERROR DETECTED."
            print str(e)
            print "\n\n"
            sleep(1)
            # Break out of the loop
            pass
            #break'''

    #np.savetxt('/home/modlab/Desktop/data.txt', big_list, delimiter=' / ')
    print "Demo exiting, turning off all modules"
    # Turn the modules off before we exit for safety
    #for m in c.itermodules():
        #m.go_slack()
    c.at.T1.set_torque(0)
    c.at.T2.set_torque(0)
    c.at.T3.set_torque(0)
    print "Closing all data files..."
    sz1.data_store_measurement.close()
    sz1.data_store_estimate.close()
    sz1.data_store_predict.close()

