'''def measure_dtheta(sz, pos_new, pos_old):
		diff = pos_new - pos_old

		if abs(diff)>sz.limit_t:
			#calculate valid delta and switch signs to be correct direction
			if pos_new >= pos_old:# diff is +ve, so the solution should be -ve
				diff = ((sz.max_t-pos_new)+(pos_old-sz.min_t)+1)*(-1)
			else: # diff is negative, therfore the solution should be positive
				diff = ((sz.max_t-pos_old)+(pos_new-sz.min_t)+1)
		else:
			diff = diff #valid calculation
		return diff # convert ticks to radians'''


	def update_state_sensors(sz, c): #currently unused
		#This function updates the position of the system based purely on the IMU and Lidar sensor readings
		rotation=[]
		rotation = sz.get_sensor_readings()
		sz.L[0] = sz.get_lidar1_readings()
		sz.sensed_pos = sz.rotate(rotation[0],rotation[1],sz.L[0])
		sz.L = sz.cart2tether(sz.sensed_pos,False)
		#print "sensed tether lengths are : "
		#print sz.L

def cart2tether(sz,xyz,col_fixed):
		#convert a cartesian goal to tether length goals. assumes a very simple geometry
		#Assumes tethers begin in the z=0 plane and end at the center of the end effector. Inaccuracies grow as arm length extends
		#goal : 1x3 array [x,y,z]
       		#col_fixed: logical 0 is fixed length sz 1 is free length sz (length is a free varible)
       		# OUTPUT
       		# L = 1x4 array [L0,L1,L2,L3] spiral zipper and each tether length
		x = xyz[0]
		y = xyz[1]
		z = xyz[2]
		#if half plane, ignore z
		if col_fixed is True: #this is only used for initialization purposes
			#back out tether lengths and
			k = x**2+y**2+z**2 #radius of sphere
			p0 = xyz #desiredposition (goal)
			L0 = np.linalg.norm(xyz) # length of centre column
        	
			L1 = np.linalg.norm(sz.p[1]-p0)
			L2 = np.linalg.norm(sz.p[2]-p0)
			L3 = np.linalg.norm(sz.p[3]-p0)
		elif col_fixed is False:
			#use x and y to solve for what z should be then solve for L
			z = (sz.L[0]**2-x**2-y**2)**0.5 #assume positive square root			
			k = x**2+y**2+z**2 #radius of sphere
			p0 = [x,y,z]
			L0 = k**0.5 # should just be sz.L[0] if not there is a math mistake
			L1 = np.linalg.norm(sz.p[1]-p0)
			L2 = np.linalg.norm(sz.p[2]-p0)
			L3 = np.linalg.norm(sz.p[3]-p0)
			
		else:
			print 'error in cart2tether input for col_fixed'

		L = [L0,L1,L2,L3]

		return L

def get_sensor_readings(sz):
		l = []
		l2 = []
		startread = False
		startRead2 = False
		finished1 = False
		finished2 = False
		count = 0
		#readings = sz.ser_gyro.readline()
		while (len(l) != 3) or (len(l2) != 3):
			# print "trying to read"
			#bytesToRead = sz.ser_gyro.inWaiting()
			#readings = sz.ser_gyro.read(bytesToRead)			
			readings = sz.ser_gyro.readline()
			l = []
			l2 = []
			count = count + 1
			t = 0
			for t in reversed(readings.split()):  # read from most recent serial data

				if (t is '}'):
					startRead2 = True
					continue
				if (startRead2):
					if (t is '{'):
						startRead2 = False
						finished2 = True
					else:
						try:
							l.append(float(t))
						except ValueError:
							pass

				if (t is ']'):
					startread = True
					continue
				if (startread):
					if (t is '['):
						startread = False
						finished1 = True

					else:
						try:
							l2.append(float(t))
						except ValueError:
							pass
				if (finished1 and finished2):
					continue
		#print t
		if t != '[':
			l = sz.lold
		else:
			l = l[::-1]  # Reverse readings to get in [x y z] order
		l2 = l2[::-1]  # Reverse readings to get in [x y z] order
		sz.lold = l			
			#if (len(l2) != 3 or len(l) != 3):
			#	sleep(0.01)
		#print "Sensor Readings:"
		#print l

		#print "sensor loop repeats %f" %count
		sz.ser_gyro.flushInput()
		return l2

	def Jacobian_Math(sz,sensed_pos):
		x1unit = sensed_pos/np.linalg.norm(sensed_pos)	

		OB = sz.OB[1]
		x2 = sz.p[1]
		x2unit = (OB - x2)/np.linalg.norm(OB - x2)

		X = np.array([x2[0],x2[1]])
		M = np.array([[x1unit[0], -x2unit[0]],[x1unit[1], -x2unit[1]]])
		t = np.dot(np.linalg.inv(M), X) 
		virtual_point = np.array([[(x2[0] + x2unit[0] * t[1]), (x2[1] + x2unit[1] * t[1]), (x2[2] + x2unit[2] * t[1])]])

		# print "virtual point v1 "
		# print virtual_point

		adjustment_factor = np.linalg.norm(OB) / np.linalg.norm(virtual_point - x2)


		tether_vectors = np.array([sz.L_vel_actual[1]*((sz.p[0] - virtual_point)/np.linalg.norm(sz.p[0] - virtual_point)),sz.L_vel_actual[2]*((sz.p[1] - virtual_point)/np.linalg.norm(sz.p[1] - virtual_point)),sz.L_vel_actual[3]*((sz.p[2] - virtual_point)/np.linalg.norm(sz.p[2] - virtual_point)), sz.L_vel_actual[0]*(-1*virtual_point/np.linalg.norm(virtual_point))])
		tether_vectors = np.reshape(tether_vectors,(12,1))

		attach_points = np.array([np.hstack([sz.p[0],0]), np.hstack([sz.p[1],0]), np.hstack([sz.p[2],0]),np.array([0,0,0,1])])
		J = jacobianMatrix(virtual_point, attach_points)
		J.cal_J_AB()
		# print "Jacobian is "
		# print J.J_AB
		velocity = np.dot(J.J_AB,tether_vectors) * adjustment_factor
		return velocity


	def rotate(sz,p,q,r): # determines current orientation based on gravity data
		# initial position vector
		v = np.array([0,0,r])
		# Euler angles in degrees from the sensor
		# CCW +ve, CW -ve
		#need to check how things fall here
		a = m.asin((q )/9.8)#  + .0875#gets angle and accounts for bias in IMU reading
		b = m.asin((p )/9.8)#  + .01438

		R = np.array([[ (m.cos(b))			  ,         0,  m.sin(b)			],\
					   [(-m.sin(a))*(m.sin(b)),  m.cos(a), (m.sin(a))*(m.cos(b))],\
					   [(-m.sin(b))*(m.cos(a)), -m.sin(a), (m.cos(a))*(m.cos(b))]])

		new_v = np.dot(R,v)

		return new_v